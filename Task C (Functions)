1. **Scalar Function: `fn_customer_lifetime_value(customer_id)`**
    - Return total **paid** amount for the customer's delivered/shipped/placed (non-cancelled) orders.

CREATE OR REPLACE FUNCTION fn_customer_lifetime_value(p_customer_id INT)
RETURNS NUMERIC AS $$
DECLARE
    v_total_amount NUMERIC;
BEGIN
    SELECT
        COALESCE(SUM(p.amount), 0) INTO v_total_amount
    FROM
        orders o
    JOIN
        payments p ON o.order_id = p.order_id
    WHERE
        o.customer_id = p_customer_id
        AND o.status IN ('delivered', 'shipped', 'placed');

    RETURN v_total_amount;
END;
$$ LANGUAGE plpgsql;

2. **Table Function: `fn_recent_orders(p_days INT)`**
    - Return `order_id, customer_id, order_date, status, order_total` for orders in the last `p_days` days.
CREATE OR REPLACE FUNCTION fn_recent_orders(p_days INT)
RETURNS TABLE (
    order_id INT,
    customer_id INT,
    order_date TIMESTAMP,
    status VARCHAR,
    order_total NUMERIC
) AS $$
    SELECT
        o.order_id,
        o.customer_id,
        o.order_date,
        o.status,
        SUM(oi.quantity * oi.unit_price) AS order_total
    FROM
        orders o
    JOIN
        order_items oi ON o.order_id = oi.order_id
    WHERE
        o.order_date >= CURRENT_DATE - (p_days * INTERVAL '1 day')
    GROUP BY
        o.order_id,
        o.customer_id,
        o.order_date,
        o.status
    ORDER BY
        o.order_date DESC;
$$ LANGUAGE sql;

SELECT * FROM fn_recent_orders(60);

3. **Utility Function: `fn_title_case_city(text)`**
    - Return city name with first letter of each word capitalized (hint: split/upper/lower or use `initcap()` in PostgreSQL).

CREATE OR REPLACE FUNCTION fn_title_case_city(p_city_name text)
RETURNS text AS $$
    SELECT INITCAP(p_city_name);
$$ LANGUAGE sql;

-- Using the function on a single string
SELECT fn_title_case_city('bhaktapur');

-- Using the function on your customers table
SELECT city, fn_title_case_city(city) FROM customers;
