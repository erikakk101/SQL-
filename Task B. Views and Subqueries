1. **Create View: `vw_recent_orders_30d`**
   - View of orders placed in the **last 30 days** from `CURRENT_DATE`, excluding `cancelled`.
   - Columns: order_id, customer_id, order_date, status, order_total (sum of items).

CREATE OR REPLACE VIEW vw_recent_orders_30d AS
SELECT
    o.order_id,
    o.customer_id,
    o.order_date,
    o.status,
    SUM(oi.quantity * oi.unit_price) AS order_total
FROM
    orders o
JOIN
    order_items oi ON o.order_id = oi.order_id
WHERE
    o.status <> 'cancelled'
    AND o.order_date >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY
    o.order_id,
    o.customer_id,
    o.order_date,
    o.status;

2. **Products Never Ordered**
   - Using a subquery, list products that **never** appear in `order_items`.
SELECT
    product_id,
    product_name
FROM
    products
WHERE
    product_id NOT IN (SELECT product_id FROM order_items);

3. **Top Category by City**
   - For each `city`, find the **single category** with the highest total revenue. Use an inner subquery or a view plus a filter on rank.
WITH CityCategoryRevenue AS (
    -- Step 1: Calculate total revenue per city and category
    SELECT
        c.city,
        p.category,
        SUM(oi.quantity * oi.unit_price) AS total_revenue
    FROM
        customers c
    JOIN
        orders o ON c.customer_id = o.customer_id
    JOIN
        order_items oi ON o.order_id = oi.order_id
    JOIN
        products p ON oi.product_id = p.product_id
    GROUP BY
        c.city,
        p.category
),
RankedCityCategories AS (
    -- Step 2: Rank the categories by revenue within each city
    SELECT
        city,
        category,
        total_revenue,
        RANK() OVER (PARTITION BY city ORDER BY total_revenue DESC) AS rank
    FROM
        CityCategoryRevenue
)
-- Step 3: Select only the top-ranked category for each city
SELECT
    city,
    category,
    total_revenue
FROM
    RankedCityCategories
WHERE
    rank = 1
ORDER BY
    city;

4. **Customers Without Delivered Orders**
   - Using `NOT EXISTS`, list customers who have **no orders** with status `delivered`.

SELECT
    c.customer_id,
    c.full_name
FROM
    customers c
WHERE
    NOT EXISTS (
        SELECT 1
        FROM orders o
        WHERE o.customer_id = c.customer_id
          AND o.status = 'delivered'
    )
ORDER BY
    c.full_name;
